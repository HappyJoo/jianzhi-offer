# Python 摩尔投票法
# 参考：https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/solution/mian-shi-ti-39-shu-zu-zhong-chu-xian-ci-shu-chao-3/
# 时间复杂度 O(N) 
# 空间复杂度 O(1) 
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        votes = 0
        for num in nums:
            if votes == 0: x = num
            votes += 1 if num == x else -1
        return x


# Python 排序法：先排序，取正中间那个数
# 时间复杂度 O(N) 
# 空间复杂度 O(N) 
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        return sorted(nums)[len(nums)//2]


# Python hash 法
# 时间复杂度 O(N) 
# 空间复杂度 O(N) 
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        d = {}
        for i in nums:
            if i not in d: d[i] = 0
            else: d[i] += 1
        return max(d, key = d.get)