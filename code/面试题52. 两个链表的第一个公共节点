# Python 双指针
# 参考：https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/solution/shuang-zhi-zhen-fa-lang-man-xiang-yu-by-ml-zimingm/
# 时间复杂度 O(N) 最差遍历两次链表
# 空间复杂度 O(1) 两个指针动

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        node1, node2 = headA, headB
        while node1 != node2:
            node1 = node1.next if node1 else headB
            node2 = node2.next if node2 else headA
        return node1


# C 双指针 同上
struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {
    struct ListNode *node1 = headA, *node2 = headB;
    while (node1 != node2)
    {
        node1 = node1 != NULL ? node1->next : headB;
        node2 = node2 != NULL ? node2->next : headA;
    }
    return node1;
}