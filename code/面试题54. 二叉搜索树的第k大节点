# Python 递归
# 参考：https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/solution/mian-shi-ti-54-er-cha-sou-suo-shu-de-di-k-da-jie-d/
# 时间复杂度 - O(n) 最差是链表，退化为O(n)，最好是O(1)
# 空间复杂度 - O(n) 退化为链表时，要用 O(n) 的栈空间
class Solution:
    def kthLargest(self, root: TreeNode, k: int) -> int:
        def dfs(root):
            if not root: return 
            dfs(root.right)
            if self.k == 0: return 
            self.k -= 1
            if self.k == 0: self.res = root.val
            dfs(root.left)
        self.k = k
        dfs(root)
        return self.res

# Python 递归 
# 参考：https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/solution/javaji-bai-100de-xiang-xi-jie-da-di-gui-he-die-dai/
# 根据这位老哥的 Java 递归，换成了 Python 的代码，虽然还不太懂。
class Solution:
    def kthLargest(self, root: TreeNode, k: int) -> int:
        cnt = 1
        s = []
        while root or s:
            while root:
                s.append(root)
                root = root.right
            p = s.pop()
            if cnt == k: return p.val
            cnt += 1
            root = p.left
        return 0
# Java 老哥的 Java 代码，供参考
class Solution {
    public int kthLargest(TreeNode root, int k) {
        int count = 1;
        Stack<TreeNode> stack = new Stack<>();
        while (Objects.nonNull(root) || !stack.empty()) {
            while (Objects.nonNull(root)) {
                stack.push(root);
                root = root.right;
            }
            TreeNode pop = stack.pop();
            if (count == k) {
                return pop.val;
            }
            count++;
            root = pop.left;
        }
        return 0;
    }
}

# Python 这个等于把整个二叉树按照中序遍历展开，然后取倒数第 k 位，所以非常地慢。
# 时间复杂度 - O(n) 最好最差都是退化为O(n)，因为要全部遍历一遍
# 空间复杂度 - O(n) 退化为链表时，要用 O(n) 的栈空间
class Solution:
    def kthLargest(self, root: TreeNode, k: int) -> int:
        def helper(root):
            return helper(root.left)+[root.val]+helper(root.right) if root else []
        return helper(root)[-k]