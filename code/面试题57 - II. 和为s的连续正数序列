# Python
# 参考：https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/solution/mian-shi-ti-57-ii-he-wei-sde-lian-xu-zheng-shu-x-2/
# 时间复杂度 - O(target * sqrt(target)) 最差是链表，退化为O(n)，最好是O(1)
# 空间复杂度 - O(1)

class Solution:
    def findContinuousSequence(self, target: int) -> List[List[int]]:
        res = []
        limit = (target - 1) // 2 #向下取整
        for i in range(1, limit + 1): # 要包括 limit
            sum = 0
            for j in range(i, target):
                tmp = []
                sum += j
                if sum > target:
                    break
                elif sum == target:
                    for k in range(i, j+1):
                        tmp.append(k)
                    res.append(tmp)
                    break
        return res


# Python 滑动窗口
# 参考：https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/solution/shi-yao-shi-hua-dong-chuang-kou-yi-ji-ru-he-yong-h/
# 两个指针都是从左边开始向右滑动，左指针不能超过 target 的一半。
# 时间复杂度 - O(target) 
# 空间复杂度 - O(1) 

class Solution:
    def findContinuousSequence(self, target: int) -> List[List[int]]:
        l = r = 1
        sum = 0
        res = []
        while l <= target // 2:
            if sum < target:
                sum += r 
                r += 1
            elif sum > target:
                sum -= l 
                l += 1
            else:
                tmp = list(range(l, r))
                res.append(tmp)
                sum -= l 
                l += 1
        return res