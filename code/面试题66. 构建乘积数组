# Python
# 时间复杂度 - O(N) 遍历两次数组 a
# 空间复杂度 - O(1)
class Solution:
    def constructArr(self, a: List[int]) -> List[int]:
        b, tmp = [1] * len(a), 1
        for i in range(1, len(a)):
            b[i] = b[i - 1] * a[i - 1] # 下三角
        for i in range(len(a) - 2, -1, -1): 
            tmp *= a[i + 1] # 上三角
            b[i] *= tmp # 下三角 * 上三角
        return b


# C
# 时间复杂度 - O(N) 遍历两次数组 a
# 空间复杂度 - O(1)
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* constructArr(int* a, int aSize, int* returnSize){
    // 判断当 a 是空数组的边界条件，C 语言的数组不能用 -1，python 可以。
    if (aSize == 0) {
        *returnSize = 0;
        return a;
    }
    int tmp = 1;
    int *b = malloc(aSize * sizeof(int));
    b[0] = 1;
    for (int i = 1; i < aSize; i++) {
        b[i] = b[i - 1] * a[i - 1];
    }

    for (int i = aSize - 2; i >= 0; i--) {
        tmp *= a[i + 1];
        b[i] *= tmp;
    }
    *returnSize = aSize;
    return b;
}